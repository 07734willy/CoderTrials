from __future__ import print_function
from subprocess import PIPE, run, Popen, TimeoutExpired
from argparse import ArgumentParser
import sys
import os

def run_solver(command, is_piped):
    #pipe_r, pipe_w = os.pipe()
    test_cases = []
    add_tests = "y"
    while add_tests in "y":
        if not is_piped:
            print(":input:")
        
        test_input = ""
        pipe_r, pipe_w = os.pipe()
        with Popen(command, stdout=PIPE, stdin=pipe_r) as process:
            while process.returncode == None:
                text = sys.stdin.read()
                test_input += text
                pipe_w.write(text)
            #test_cases.append((tee.stdout.read(), run_output))
            if not is_piped:
                print(":output:\n{}\n".format(run_output))
        
        # We can't prompt whether to keep going, because it'll get logged into
        # the test cases as well
        if is_piped:
            break

        add_tests = ""
        while answer not in "yn":
            add_tests = input("Keep adding test cases? [y/n]").lower()
    
    return test_cases

def format_tests(test_cases):
    tests = []
    for test_input, test_output in test_cases:
        text = "input_lines: {}".format(len(test_input))
        text += test_input
        text += "\noutput_lines: {}".format(len(test_output))
        text += test_output
        tests.append(text)
    return "\n\n".join(tests)

# Parse the command line options, return the result
def parse_options():
    parser = ArgumentParser()
    parser.add_argument('-a', action="store_true", dest="append", help="Write to the test case file in append mode")
    parser.add_argument('-v', action="store_true", dest="version", help="Print the version number")
    parser.add_argument('-f', metavar="FILENAME", dest="filename", type=str, default=None, help="Name of the test cases file")
    parser.add_argument('command', help="Shell command to run the solver program") 
    parser.add_argument('args', nargs="*", help="Arguments supplied to solver program")
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_options()
    
    if args.version:
        print("Version: {0}".format(".".join(map(str, version))))
        sys.exit(0)

    new_file = not args.append or not os.path.isfile(args.filename)
    
    with open(args.filename, "a" if args.append else "w+") if args.filename else sys.stdout as tests_file:
        if new_file:
            tests_file.write("# These test cases were auto-generated by /r/CoderTrials generator script\n# See https://old.reddit.com/r/CoderTrials/wiki/generator")
        test_cases = run_solver([args.command] + args.args, args.filename != None)
        tests_file.write(format_tests(test_cases))
